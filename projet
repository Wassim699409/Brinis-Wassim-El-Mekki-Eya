#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <math.h>

typedef struct data {
    float x;
    float y;
}data;

//fonction affine
double f(double x, double a, double b) {
    return a * x + b;
}
void gradient_descent(double *mse, Data *points, int n, double *a, double *b, double alpha, int max_iter, double eps) {
    if (points == NULL) {
        printf("Error: Null dataset\n");
        exit(1);
    }

    double grad_a, grad_b;
    int iter = 0;

    do {
        grad_a = 0;
        grad_b = 0;
        *mse = 0;

        for (int i = 0; i < n; i++) {
            double x = points[i].x;
            double y_real = points[i].y;
            double y_pred = predict(x, *a, *b);

            double error = y_real - y_pred;
            *mse += error * error;
            grad_a += -2 * x * error;
            grad_b += -2 * error;
        }

        *mse /= n;
        grad_a /= n;
        grad_b /= n;

        // Update parameters
        *a -= alpha * grad_a;
        *b -= alpha * grad_b;

        iter++;
    } 
 void afficher(data *p, int nb) {
        if (p == NULL) {
            printf("Erreur\n");
            exit(1);
        }
    
        for (int i = 0; i < nb; i++) {
            printf("X = %.2f  Y = %.2f\n", p[i].x, p[i].y);
        }
    }
    
void ajout(data **p, int *nb) {
        printf("Introduire le nombre de points: ");
        scanf("%d", nb);
    
        *p = (data *)malloc(*nb * sizeof(data));
        if (*p == NULL) {
            printf("Erreur d'allocation\n");
            exit(1);
        }
    
        for (int i = 0; i < *nb; i++) {
            printf("Point %d:\n", i + 1);
            printf("X = ");
            scanf("%f", &((*p)[i].x));
            printf("Y = ");
            scanf("%f", &((*p)[i].y));
        }
    }
int main(void) {
        data *p = NULL;
        int nb;
    
        // Saisie des points
        ajout(&p, &nb);
        afficher(p, nb);
    
        // Initialisation de a et b avec des valeurs aléatoires entre 0 et 10
        srand((unsigned int)time(NULL));
        double a = ((double)rand() / RAND_MAX) * 10;
        double b = ((double)rand() / RAND_MAX) * 10;
        printf("f(X) = %.5f X + %.5f\n", a, b);
    
        // Initialisation des paramètres
        double eps = 1e-5;
        double alpha = 0.01;
        int max_iter = 10000;
        double mse = 0;
    
        // Exécution de la descente de gradient
        descente_gradient(&mse, p, nb, &a, &b, alpha, max_iter, eps);
    
        // Affichage des résultats finaux
        printf("Fonction finale: f(X) = %.5f X + %.5f\n", a, b);
        printf("Erreur quadratique moyenne finale: %.5f\n", mse);
    
        // Libération de la mémoire
        free(p);
        return 0;
    }